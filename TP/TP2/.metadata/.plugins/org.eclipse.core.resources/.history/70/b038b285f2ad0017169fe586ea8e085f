package test.java;

import static org.junit.Assert.*;

import java.util.concurrent.CountDownLatch;

import org.junit.Before;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.Timeout;
import org.junit.runners.model.TestTimedOutException;

import main.java.Article;
import main.java.Magasin;
import sun.util.logging.resources.logging;

public class ChercherDicho1Test {
	
	private final CountDownLatch latch = new CountDownLatch(1);
	
	private Article articleValid;
	private Article articleValid2;
	private Article articleValid3;
	private Article articleToFind;
	private Magasin magasin;
	
	@Rule
	public Timeout globalTimeout = Timeout.seconds(10);

	@Before
	public void setUp() throws Exception {
		articleValid = new Article("Article1", 50, 1);
		articleValid2 = new Article("Article2", 51, 2);
		articleValid3 = new Article("Article3", 52, 3);
		articleToFind = new Article("ToFind", 51.50, 5);
		magasin = new Magasin(3);
		magasin.insererArticle(articleValid);
		magasin.insererArticle(articleValid2);
		magasin.insererArticle(articleValid3);
		
		//System.out.println("Appel de setUp() - @Before");
	}
	
//	@Test
//	public void chercherDicho1

	@Test
	public void chercherDicho1TimeoutTest() throws InterruptedException {
		Thread notCurrentThread = new Thread() {
			@Override
			public void run() {
				magasin.chercherDicho1(articleToFind);
			}
		};

		notCurrentThread.start();

		//Let the current thread sleep (not the created thread!)
		Thread.sleep(5000);
		System.err.println("Boucle Infinie ! " + ".");
		System.err.println("Valeur à trouver : " + articleToFind.getPrix());
		System.err.println("Valeur non trouvée, cependant le programme continue à tourner..");
		System.err.println("Arrêt du programme");
		assertTrue(notCurrentThread.isAlive());
	}
}
